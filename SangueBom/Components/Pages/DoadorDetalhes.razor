@page "/doadores"
@using SangueBom.Domain.Entities
@using SangueBom.Domain.Interfaces
@using SangueBom.Domain.Enums
@using SangueBom.Domain.Repositories
@using SangueBom.Domain.Services

@inject ICadastroDoadorRepositorio DoadorRepo
@inject IRepositorioDoacao DoacaoRepo
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<link href="css/styleDetalhes.css" rel="stylesheet" />

<h3 class="title">Detalhes dos Doadores</h3>

@if (!string.IsNullOrEmpty(GlobalMensagem))
{
    <div class="alert @GlobalMensagemCss">@GlobalMensagem</div>
}

@if (doadores == null)
{
    <p class="loading-message">Carregando...</p>
}
else if (!doadores.Any())
{
    <p class="empty-message">Nenhum doador encontrado.</p>
    <button id="button_voltar" class="btn-back" @onclick="VoltarAoCadastro">Voltar ao Cadastro</button>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Idade</th>
                <th>CPF</th>
                <th>Telefone</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doador in doadores)
            {
                <tr>
                    <td>@doador.Nome</td>
                    <td>@doador.Idade</td>
                    <td>@doador.Cpf.Valor</td>
                    <td>@doador.Telefone</td>
                    <td>
                        <button id="button_detalhes" class="btn-primary"
                                @onclick="() => ExibirDetalhesDoacoes(doador)">
                            Ver Detalhes
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button id="button_voltar" class="btn-back" @onclick="VoltarAoCadastro">Voltar ao Cadastro</button>
}

@if (doadorSelecionado != null)
{
    <div class="details">
        <h4>Detalhes de Doações - @doadorSelecionado.Nome</h4>

        @if (historicoDoacoes == null || !historicoDoacoes.Any())
        {
            <p class="empty-message">Não há doações registradas.</p>
        }
        else
        {
            <ul class="donation-list">
                @foreach (var doacao in historicoDoacoes)
                {
                    <li>Data: @doacao.DataDoacao.ToString("dd/MM/yyyy")</li>
                }
            </ul>
        }

        <button id="button_nova_doacao" class="btn-success" @onclick="() => RegistrarNovaDoacao(doadorSelecionado)">
            Registrar Nova Doação
        </button>

    </div>
}

@code {
    private List<Doador> doadores;
    private List<Doacao> historicoDoacoes;
    private Doador doadorSelecionado;
    private string GlobalMensagem;
    private string GlobalMensagemCss;
    private readonly ValidadorDeDoacaoService _validador = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            doadores = await DoadorRepo.ListarAsync();
        }
        catch (Exception ex)
        {
            MostrarMensagem("Erro ao carregar a lista de doadores: " + ex.Message, "alert-danger");
        }
    }

    private async Task ExibirDetalhesDoacoes(Doador doador)
    {
        try
        {
            doadorSelecionado = doador;
            historicoDoacoes = await DoacaoRepo.ObterPorDoadorIdAsync(doador.Id);
        }
        catch (Exception ex)
        {
            MostrarMensagem("Erro ao carregar histórico de doações: " + ex.Message, "alert-danger");
        }
    }

    private async Task RegistrarNovaDoacao(Doador doador)
    {
        try
        {
            var historico = await DoacaoRepo.ObterPorDoadorIdAsync(doador.Id);
            DateTime? dataUltima = historico.OrderByDescending(d => d.DataDoacao).FirstOrDefault()?.DataDoacao;

            var hoje = DateTime.Today;
            if (_validador.PodeRealizarDoacao(doador, dataUltima, hoje))
            {
                var novaDoacao = new Doacao(doador.Id, hoje);
                await DoacaoRepo.RegistrarAsync(novaDoacao);

                MostrarMensagem($"Nova doação registrada com sucesso em {hoje:dd/MM/yyyy}.", "alert-success");

                historicoDoacoes = await DoacaoRepo.ObterPorDoadorIdAsync(doador.Id);
            }
            else
            {
                int diasRestantes = (dataUltima.HasValue ? (hoje - dataUltima.Value).Days : 0);
                int intervaloMinimo = doador.Genero == Genero.Masculino ? 60 : 90;

                MostrarMensagem($"Intervalo mínimo de {intervaloMinimo} dias ainda não cumprido ({diasRestantes} dias passados).", "alert-warning");
            }
        }
        catch (Exception ex)
        {
            MostrarMensagem("Erro ao registrar a doação: " + ex.Message, "alert-danger");
        }
    }

    private void MostrarMensagem(string mensagem, string cssClass)
    {
        GlobalMensagem = mensagem;
        GlobalMensagemCss = cssClass;
    }

    private void VoltarAoCadastro()
    {
        NavigationManager.NavigateTo("/cadastro");
    }
}
