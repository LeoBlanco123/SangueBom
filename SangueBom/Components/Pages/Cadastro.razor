@page "/cadastro"
@using DoadoresDeSangue.Domain.ValueObjects
@using SangueBom.Domain.Interfaces
@using SangueBom.Domain.ValueObjects
@using SangueBom.Domain.Entities
@using SangueBom.Domain.Enums
@rendermode InteractiveServer
@inject ICadastroDoadorRepositorio _repositorio

<h3>Cadastro de Novo Doador</h3>

<form>
    <!-- Campos do Doador -->
    <div class="form-group">
        <label for="nome">Nome:</label>
        <input type="text" id="nome" class="form-control" @bind="Nome" />
    </div>

    <div class="form-group">
        <label for="cpf">CPF:</label>
        <input type="text" id="cpf" class="form-control" @bind="CPF" />
    </div>

    <div class="form-group">
        <label for="dataNascimento">Data de Nascimento:</label>
        <input type="date" id="dataNascimento" class="form-control" @bind="DataNascimento" />
    </div>

    <div class="form-group">
        <label for="genero">Gênero:</label>
        <select id="genero" class="form-control" @bind="GeneroSelecionado">
            @foreach (var genero in Enum.GetValues<Genero>())
            {
                <option value="@genero">@genero</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="tipoSanguineo">Tipo Sanguíneo:</label>
        <select id="tipoSanguineo" class="form-control" @bind="TipoSanguineo">
            <option value="A+">A+</option>
            <option value="A-">A-</option>
            <option value="B+">B+</option>
            <option value="B-">B-</option>
            <option value="O+">O+</option>
            <option value="O-">O-</option>
            <option value="AB+">AB+</option>
            <option value="AB-">AB-</option>
        </select>
    </div>

    <!-- Campos do Endereço -->
    <h4>Endereço</h4>
    <div class="form-group">
        <label for="rua">Rua:</label>
        <input type="text" id="rua" class="form-control" @bind="Rua" />
    </div>
    <div class="form-group">
        <label for="numero">Número:</label>
        <input type="text" id="numero" class="form-control" @bind="Numero" />
    </div>
    <div class="form-group">
        <label for="bairro">Bairro:</label>
        <input type="text" id="bairro" class="form-control" @bind="Bairro" />
    </div>
    <div class="form-group">
        <label for="cidade">Cidade:</label>
        <input type="text" id="cidade" class="form-control" @bind="Cidade" />
    </div>
    <div class="form-group">
        <label for="estado">Estado:</label>
        <input type="text" id="estado" class="form-control" @bind="Estado" />
    </div>

    <button type="button" class="btn btn-success" @onclick="CadastrarDoador">Cadastrar</button>

    @if (!string.IsNullOrEmpty(Mensagem))
    {
        <p class="@MensagemClasseCss">@Mensagem</p>
    }
</form>

@code {
    private string Nome { get; set; }
    private string CPF { get; set; }
    private DateTime DataNascimento { get; set; } = DateTime.Today;
    private Genero GeneroSelecionado { get; set; }
    private string TipoSanguineo { get; set; }

    private string Rua { get; set; }
    private string Numero { get; set; }
    private string Bairro { get; set; }
    private string Cidade { get; set; }
    private string Estado { get; set; }

    private Endereco Endereco { get; set; }
    private Doador DoadorCriado { get; set; }
    private string Mensagem { get; set; }
    private string MensagemClasseCss { get; set; }

    private async Task CadastrarDoador()
    {
        try
        {
            var cpfLimpo = CPF.Replace(".", "").Replace("-", "").Replace(" ", "");
            var cpfObj = new DoadoresDeSangue.Domain.ValueObjects.CPF(cpfLimpo);

            var doadorExistente = await _repositorio.ObterPorCpfAsync(cpfObj.Valor);
            if (doadorExistente != null)
            {
                Mensagem = "CPF já cadastrado";
                MensagemClasseCss = "text-danger";
                return;
            }

            // Validação da idade mínima (18 anos)
            var idade = DateTime.Today.Year - DataNascimento.Year;
            if (DataNascimento > DateTime.Today.AddYears(-idade)) idade--;

            if (idade < 18)
            {
                Mensagem = "O doador deve ter pelo menos 18 anos";
                MensagemClasseCss = "text-danger";
                return;
            }

            var tipoSanguineoEnum = Enum.Parse<TipoSanguineo>(TipoSanguineo.Replace("+", "Positivo").Replace("-", "Negativo"));
            Endereco = new Endereco(Rua, Numero, Bairro, Cidade, Estado);
            DoadorCriado = new Doador(Nome, cpfObj, DataNascimento, GeneroSelecionado, tipoSanguineoEnum, Endereco, "11999999999");

            await _repositorio.CadastrarAsync(DoadorCriado);

            Mensagem = $"Doador cadastrado com sucesso: {DoadorCriado.Nome}";
            MensagemClasseCss = "text-success";
        }
        catch (ArgumentException)
        {
            Mensagem = "CPF inválido";
            MensagemClasseCss = "text-danger";
        }
        catch (Exception ex)
        {
            Mensagem = $"Erro ao cadastrar doador: {ex.Message}";
            MensagemClasseCss = "text-danger";
        }
    }
}
